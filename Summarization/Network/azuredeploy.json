{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
      "PlaybookName": {
        "type": "string",
        "defaultValue": "DataLake-Summarize-Network",
        "metadata": {
          "description": "Name of the Logic App."
        }
      },
      "SentinelWorkspaceID": {
        "type": "string",
        "metadata": {
          "description": "The unique identifier of the Azure Log Analytics workspace."
        }
      },
      "SentinelWorkspaceKey": {
        "type": "securestring",
        "metadata": {
          "description": "The primary or secondary key of the Azure Log Analytics workspace."
        }
      },
      "ADXClusterURI":{
        "type":"string",
        "metadata":{
          "description": "URL of the ADX Cluster"
        }
      },
      "ADXDatabaseName":{
        "defaultValue": "DBadxdata001",
        "type": "string",
        "metadata": {
            "description": "Your ADX Database Name"
          }
      }
    },
  "variables": {
        "AzureSentinelConnectionName": "[concat('azuresentinel-', parameters('PlaybookName'))]",
        "ADXConnectionName": "[concat('azuredataexplorer-', parameters('PlaybookName'))]"
  },
  "resources": [
          {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('AzureSentinelConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('AzureSentinelConnectionName')]",
                "parameterValues": {
                    "username": "[parameters('SentinelWorkspaceID')]",
                    "password": "[parameters('SentinelWorkspaceKey')]"
                },
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureloganalyticsdatacollector')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('ADXConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('ADXConnectionName')]",
                "customParameterValues": {},
                "parameterValueType": "Alternative",
                "api": {
                    "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',resourceGroup().location,'/managedApis/kusto')]"
                }
            }
        },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2019-05-01",
      "name": "[parameters('PlaybookName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
          "[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
          "[resourceId('Microsoft.Web/connections', variables('ADXConnectionName'))]"
      ],
      "properties": {
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "Recurrence": {
              "recurrence": {
                "frequency": "Hour",
                "interval": 1
              },
              "type": "Recurrence"
            }
          },
          "actions": {
            "Inbound_Firewall_Traffic": {
              "actions": {
                "Increment_InboundFirewall_Row": {
                  "runAfter": {
                    "Send_Data_2": [
                      "Succeeded"
                    ]
                  },
                  "type": "IncrementVariable",
                  "inputs": {
                    "name": "InboundFirewall_Row",
                    "value": 30000
                  }
                },
                "Send_Data_2": {
                  "runAfter": {
                    "Summary_-_Inbound_Firewall_Traffic": [
                      "Succeeded"
                    ]
                  },
                  "type": "ApiConnection",
                  "inputs": {
                    "body": "@{body('Summary_-_Inbound_Firewall_Traffic')?['value']}",
                    "headers": {
                      "Log-Type": "SummariesNetworkInbound_CL",
                      "time-generated-field": "endtime"
                    },
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                      }
                    },
                    "method": "post",
                    "path": "/api/logs"
                  }
                },
                "Summary_-_Inbound_Firewall_Traffic": {
                  "runAfter": {},
                  "type": "ApiConnection",
                  "inputs": {
                    "body": {
                      "cluster": "[parameters('ADXClusterURI')]",
                      "csl": "let starttime = bin((@{variables('currtime')}-1h), 1h);\nlet endtime = bin(@{variables('currtime')}, 1h);\nlet pastrow = @{variables('InboundFirewall_Row')}-30000;\nlet currrow = @{variables('InboundFirewall_Row')};\nexternal_table('paloaltotraffic')\n| where IngestTime >= starttime and IngestTime < endtime\n| summarize ConnectionsCount=count(),\n    RemoteIPCount = count_distinct(SourceIP),\n    RemotePortsCount=count_distinct(SourcePort),\n    LocalPortsCount=count_distinct(DestinationPort),\n    OutBytes = sum(SentBytes),\n    InBytes = sum(ReceivedBytes) by DestinationIP, DeviceAction, bin(TimeGenerated, 1h)\n| sort by DestinationIP, DeviceAction, TimeGenerated\n| serialize rn = row_number()\n| where rn > pastrow and rn <=currrow\n| extend direction=\"In\", endtime=TimeGenerated + 1h\n| project-away rn\n| project-rename IP=DestinationIP",
                      "db": "[parameters('ADXDatabaseName')]"
                    },
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['azuredataexplorer']['connectionId']"
                      }
                    },
                    "method": "post",
                    "path": "/ListKustoResults/false",
                    "retryPolicy": {
                      "type": "none"
                    }
                  }
                }
              },
              "runAfter": {
                "Summary_-_Original_Palo_Table_Size_Estimate": [
                  "Succeeded",
                  "TimedOut",
                  "Skipped",
                  "Failed"
                ]
              },
              "expression": "@lessOrEquals(length(body('Summary_-_Inbound_Firewall_Traffic')?['value']), 0)",
              "limit": {
                "count": 60,
                "timeout": "PT1H"
              },
              "type": "Until"
            },
            "Initialize_Current_Time": {
              "runAfter": {},
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "currtime",
                    "type": "string",
                    "value": "datetime(\"@{utcNow()}\")"
                  }
                ]
              }
            },
            "Initialize_InboundFirewall_Row": {
              "runAfter": {},
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "InboundFirewall_Row",
                    "type": "integer",
                    "value": 30000
                  }
                ]
              }
            },
            "Initialize_OutboundFirewall_Row": {
              "runAfter": {},
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "OutboundFirewall_Row",
                    "type": "integer",
                    "value": 30000
                  }
                ]
              }
            },
            "Outbound_Firewall_Traffic": {
              "actions": {
                "Increment_OutboundFirewall_Row": {
                  "runAfter": {
                    "Send_Data": [
                      "Succeeded"
                    ]
                  },
                  "type": "IncrementVariable",
                  "inputs": {
                    "name": "OutboundFirewall_Row",
                    "value": 30000
                  }
                },
                "Send_Data": {
                  "runAfter": {
                    "Summary_-_Outbound_Firewall_Traffic": [
                      "Succeeded"
                    ]
                  },
                  "type": "ApiConnection",
                  "inputs": {
                    "body": "@{body('Summary_-_Outbound_Firewall_Traffic')?['value']}",
                    "headers": {
                      "Log-Type": "SummariesNetworkOutbound_CL",
                      "time-generated-field": "endtime"
                    },
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                      }
                    },
                    "method": "post",
                    "path": "/api/logs"
                  }
                },
                "Summary_-_Outbound_Firewall_Traffic": {
                  "runAfter": {},
                  "type": "ApiConnection",
                  "inputs": {
                    "body": {
                      "cluster": "[parameters('ADXClusterURI')]",
                      "csl": "let starttime = bin((@{variables('currtime')}-1h), 1h);\nlet endtime = bin(@{variables('currtime')}, 1h);\nlet pastrow = @{variables('OutboundFirewall_Row')}-30000;\nlet currrow = @{variables('OutboundFirewall_Row')};\nexternal_table('paloaltotraffic')\n| where IngestTime >= starttime and IngestTime < endtime\n| summarize ConnectionsCount=count(),\n    RemoteIPCount = count_distinct(DestinationIP),\n    RemotePortsCount=count_distinct(DestinationPort),\n    LocalPortsCount=count_distinct(SourcePort),\n    OutBytes = sum(SentBytes),\n    InBytes = sum(ReceivedBytes) by SourceIP, DeviceAction, bin(TimeGenerated, 1h)\n| sort by SourceIP, DeviceAction, TimeGenerated\n| serialize rn = row_number()\n| where rn > pastrow and rn <= currrow\n| extend direction=\"Out\", endtime=TimeGenerated+1h\n| project-away rn\n| project-rename IP=SourceIP",
                      "db": "[parameters('ADXDatabaseName')]"
                    },
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['azuredataexplorer']['connectionId']"
                      }
                    },
                    "method": "post",
                    "path": "/ListKustoResults/false",
                    "retryPolicy": {
                      "count": 10,
                      "interval": "PT20S",
                      "type": "fixed"
                    }
                  }
                }
              },
              "runAfter": {
                "Inbound_Firewall_Traffic": [
                  "Succeeded",
                  "TimedOut",
                  "Skipped",
                  "Failed"
                ]
              },
              "expression": "@lessOrEquals(length(body('Summary_-_Outbound_Firewall_Traffic')?['value']), 0)",
              "limit": {
                "count": 60,
                "timeout": "PT1H"
              },
              "type": "Until"
            },
            "Send_Data_3": {
              "runAfter": {
                "Summary_-_Original_Palo_Table_Size_Estimate": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": "@{body('Summary_-_Original_Palo_Table_Size_Estimate')?['value']}",
                "headers": {
                  "Log-Type": "SummariesOriginalTableSizeEstimates",
                  "time-generated-field": "endtime"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/api/logs"
              }
            },
            "Summary_-_Original_Palo_Table_Size_Estimate": {
              "runAfter": {
                "Initialize_Current_Time": [
                  "Succeeded"
                ],
                "Initialize_InboundFirewall_Row": [
                  "Succeeded"
                ],
                "Initialize_OutboundFirewall_Row": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "cluster": "[parameters('ADXClusterURI')]",
                  "csl": "let starttime = bin((@{variables('currtime')}-1h), 1h);\nlet endtime = bin(@{variables('currtime')}, 1h);\nexternal_table('paloaltotraffic')\n| where IngestTime >= starttime and IngestTime < endtime\n| take 1000000000000000000\n| summarize total = sum(estimate_data_size(*)) by endtime\n| project-rename endtime= Column1\n| extend table = \"Firewall Traffic\"",
                  "db": "[parameters('ADXDatabaseName')]"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuredataexplorer']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/ListKustoResults/false",
                "retryPolicy": {
                  "count": 10,
                  "interval": "PT20S",
                  "type": "fixed"
                }
              }
            }
          },
          "outputs": {}
        },
        "parameters": {
            "$connections": {
              "value": {
                "azuresentinel": {
                    "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                    "connectionName": "[variables('AzureSentinelConnectionName')]",
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureloganalyticsdatacollector')]"
                },
                "azuredataexplorer": {
                  "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',resourceGroup().location,'/managedApis/kusto')]",
                    "connectionId": "[resourceId('Microsoft.Web/connections', variables('ADXConnectionName'))]",
                  "connectionName": "[variables('ADXConnectionName')]",
                  "connectionProperties": {
                    "authentication": {
                      "type": "ManagedServiceIdentity"
                    }
                  }
                }
              }
            }
        }
      },
      "identity": {
        "type": "SystemAssigned"
      }
    }
  ],
  "outputs": {}
}
