{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "PlaybookName": {
        "type": "string",
        "defaultValue": "MSDX-Summarize-Network",
        "metadata": {
          "description": "Name of the Logic App."
        }
      },
      "SentinelWorkspaceID": {
        "type": "string",
        "metadata": {
          "description": "The unique identifier of the Azure Log Analytics workspace."
        }
      },
      "SentinelWorkspaceName": {
        "type": "string",
        "metadata": {
          "description": "The name of your Sentinel Log Analytics workspace."
        }
      },
      "SentinelWorkspaceKey": {
        "type": "securestring",
        "metadata": {
          "description": "The primary or secondary key of the Azure Log Analytics workspace."
        }
      },
      "ADXClusterURI":{
        "type":"string",
        "metadata":{
          "description": "URL of the ADX Cluster"
        }
      },
      "ADXDatabaseName":{
        "defaultValue": "adxdata001",
        "type": "string",
        "metadata": {
            "description": "Your ADX Database Name"
          }
    }
    },
    "variables": {
        "AzureSentinelConnectionName": "[concat('azuresentinel-', parameters('PlaybookName'))]",
        "ADXConnectionName": "[concat('azuredataexplorer-', parameters('PlaybookName'))]"
    },
    "resources": [
          {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('AzureSentinelConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('AzureSentinelConnectionName')]",
                "parameterValues": {
                    "username": "[parameters('SentinelWorkspaceID')]",
                    "password": "[parameters('SentinelWorkspaceKey')]"
                },
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureloganalyticsdatacollector')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('ADXConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('ADXConnectionName')]",
                "customParameterValues": {},
                "parameterValueType": "Alternative",
                "api": {
                    "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',resourceGroup().location,'/managedApis/kusto')]"
                }
            }
        },
      {
        "type": "Microsoft.Logic/workflows",
        "apiVersion": "2019-05-01",
        "name": "[parameters('PlaybookName')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
          "[resourceId('Microsoft.Web/connections', variables('ADXConnectionName'))]"
        ],
        "properties": {
          "definition": {
            "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
            "contentVersion": "1.0.0.0",
            "parameters": {
              "$connections": {
                "defaultValue": {},
                "type": "Object"
              }
            },
            "triggers": {
              "Recurrence": {
                "recurrence": {
                  "frequency": "Hour",
                  "interval": 1
                },
                "type": "Recurrence"
              }
            },
            "actions": {
                "Delay": {
                    "inputs": {
                        "interval": {
                            "count": 30,
                            "unit": "Second"
                        }
                    },
                    "runAfter": {},
                    "type": "Wait"
                },
                "Delay_2": {
                    "inputs": {
                        "interval": {
                            "count": 10,
                            "unit": "Second"
                        }
                    },
                    "runAfter": {},
                    "type": "Wait"
                },
                "Delay_3": {
                    "inputs": {
                        "interval": {
                            "count": 20,
                            "unit": "Second"
                        }
                    },
                    "runAfter": {},
                    "type": "Wait"
                },
                "Delay_4": {
                    "inputs": {
                        "interval": {
                            "count": 40,
                            "unit": "Second"
                        }
                    },
                    "runAfter": {},
                    "type": "Wait"
                },
                "Delay_5": {
                    "inputs": {
                        "interval": {
                            "count": 50,
                            "unit": "Second"
                        }
                    },
                    "runAfter": {},
                    "type": "Wait"
                },
                "Delay_6": {
                    "inputs": {
                        "interval": {
                            "count": 60,
                            "unit": "Second"
                        }
                    },
                    "runAfter": {},
                    "type": "Wait"
                },
                "Send_Data": {
                  "runAfter": {
                  "Summary_-_Outbound_Firewall_Traffic": [
                    "Succeeded"
                  ]
                },
                "type": "ApiConnection",
                "inputs": {
                  "body": "@{body('Summary_-_Outbound_Firewall_Traffic')?['value']}",
                  "headers": {
                    "Log-Type": "SummariesNetworkOutbound_CL",
                    "time-generated-field": "endtime"
                  },
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                    }
                  },
                  "method": "post",
                  "path": "/api/logs"
                }
              },
              "Send_Data_2": {
                "runAfter": {
                  "Summary_-_Inbound_Firewall_Traffic": [
                    "Succeeded"
                  ]
                },
                "type": "ApiConnection",
                "inputs": {
                  "body": "@{body('Summary_-_Inbound_Firewall_Traffic')?['value']}",
                  "headers": {
                    "Log-Type": "SummariesNetworkInbound_CL",
                    "time-generated-field": "endtime"
                  },
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                    }
                  },
                  "method": "post",
                  "path": "/api/logs"
                }
              },
              "Send_Data_3": {
                "runAfter": {
                  "Summary_-_Original_Palo_Table_Size_Estimate": [
                    "Succeeded"
                  ]
                },
                "type": "ApiConnection",
                "inputs": {
                  "body": "@{body('Summary_-_Original_Palo_Table_Size_Estimate')?['value']}",
                  "headers": {
                    "Log-Type": "SummariesOriginalTableSizeEstimates",
                    "time-generated-field": "endtime"
                  },
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                    }
                  },
                  "method": "post",
                  "path": "/api/logs"
                }
              },
              "Send_Data_4": {
                "runAfter": {
                  "Summary_-_DeviceProcessEvents": [
                    "Succeeded"
                  ]
                },
                "type": "ApiConnection",
                "inputs": {
                  "body": "@{body('Summary_-_DeviceProcessEvents')?['value']}",
                  "headers": {
                    "Log-Type": "SummariesDeviceProcessEvents_CL",
                    "time-generated-field": "endtime"
                  },
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                    }
                  },
                  "method": "post",
                  "path": "/api/logs"
                }
              },
              "Send_Data_5": {
                "runAfter": {
                  "Summary_-_Estimate_DeviceProcessEvents_Size": [
                    "Succeeded"
                  ]
                },
                "type": "ApiConnection",
                "inputs": {
                  "body": "@{body('Summary_-_Estimate_DeviceProcessEvents_Size')?['value']}",
                  "headers": {
                    "Log-Type": "SummariesOriginalTableSizeEstimates",
                    "time-generated-field": "endtime"
                  },
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                    }
                  },
                  "method": "post",
                  "path": "/api/logs"
                }
              },
              "Send_Data_6": {
                "runAfter": {
                  "Summary_-_DeviceNetworkEvents": [
                    "Succeeded"
                  ]
                },
                "type": "ApiConnection",
                "inputs": {
                  "body": "@{body('Summary_-_DeviceNetworkEvents')?['value']}",
                  "headers": {
                    "Log-Type": "SummariesDeviceNetworkEvents_CL",
                    "time-generated-field": "endtime"
                  },
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                    }
                  },
                  "method": "post",
                  "path": "/api/logs"
                }
              },
              "Send_Data_7": {
                "runAfter": {
                  "Summary_-_Estimate_DeviceNetworkEvents_Size": [
                    "Succeeded"
                  ]
                },
                "type": "ApiConnection",
                "inputs": {
                  "body": "@{body('Summary_-_Estimate_DeviceNetworkEvents_Size')?['value']}",
                  "headers": {
                    "Log-Type": "SummariesOriginalTableSizeEstimates",
                    "time-generated-field": "endtime"
                  },
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                    }
                  },
                  "method": "post",
                  "path": "/api/logs"
                }
              },
              "Summary_-_DeviceNetworkEvents": {
                "runAfter": {
                  "Delay_2": [
                    "Succeeded"
                ]
                },
                "type": "ApiConnection",
                "inputs": {
                  "body": {
                    "cluster": "[parameters('ADXClusterURI')]",
                    "csl": "let starttime = bin(ago(1h), 1h);\nlet endtime = bin(now(), 1h);\nexternal_table('DeviceNetworkEvents')\n| where ['time'] >= starttime and ['time'] < endtime and isnotempty(tostring(properties.RemoteIP))\n| summarize TotalSeen = count() , Users=make_set(properties.InitiatingProcessAccountName), DevicesSeen = count_distinct(tostring(properties.DeviceId)),  URLs = make_set_if(tostring(properties.RemoteUrl), isnotempty(tostring(properties.RemoteUrl))), Processes_SHA1 = make_set_if(tostring(properties.InitiatingProcessSHA1), isnotempty(tostring(properties.InitiatingProcessSHA1))),  Actions = make_set(tostring(properties.ActionType)) by RemoteIP = tostring(properties.RemoteIP) \n| extend endtime= endtime",
                    "db": "[parameters('ADXDataBaseName')]"
                  },
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['azuredataexplorer']['connectionId']"
                    }
                  },
                  "method": "post",
                  "path": "/ListKustoResults/false"
                }
              },
              "Summary_-_DeviceProcessEvents": {
                "runAfter": {
                  "Delay_3": [
                    "Succeeded"
                ]
                },
                "type": "ApiConnection",
                "inputs": {
                  "body": {
                    "cluster": "[parameters('ADXClusterURI')]",
                    "csl": "let starttime = bin(ago(1h), 1h);\nlet endtime = bin(now(), 1h);\nlet processes = external_table('DeviceProcessEvents')\n| where ['time'] >= starttime and ['time'] < endtime and isnotempty(properties.SHA1)\n| summarize TotalSeen=count(), Users=make_set_if(tostring(properties.AccountName),isnotempty(tostring(properties.AccountName))), DevicesSeen=count_distinct(tostring(properties.DeviceId)) by FileName = tostring(properties.FileName), FileSize = tostring(properties.FileSize), SHA1 = tostring(properties.SHA1)\n| extend type = \"Process\";\nexternal_table('DeviceProcessEvents')\n| where ['time'] >= starttime and ['time'] <= starttime and isempty(properties.FileName)\n| where isnotempty(tostring(properties.InitiatingProcessSHA1))\n| summarize DevicesSeen=count_distinct(tostring(properties.DeviceId)), Users=make_set_if(tostring(properties.AccountName),isnotempty(tostring(properties.AccountName))), TotalSeen=count() by SHA1 = tostring(properties.InitiatingProcessSHA1), FileSize = tostring(properties.InitiatingProcessFileSize), FileName = tostring(properties.InitiatingProcessFileName)\n| extend type = \"InitatingProcess\"\n| union processes\n| extend endtime= endtime",
                    "db": "[parameters('ADXDataBaseName')]"
                  },
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['azuredataexplorer']['connectionId']"
                    }
                  },
                  "method": "post",
                  "path": "/ListKustoResults/false"
                }
              },
              "Summary_-_Estimate_DeviceNetworkEvents_Size": {
                "runAfter": {
                  "Delay": [
                    "Succeeded"
                ]
                },
                "type": "ApiConnection",
                "inputs": {
                  "body": {
                    "cluster": "[parameters('ADXClusterURI')]",
                    "csl": "let starttime = bin(ago(1h), 1h);\nlet endtime = bin(now(), 1h);\nexternal_table('DeviceNetworkEvents')\n| where ['time'] >= starttime and ['time'] < endtime\n| summarize total = sum(estimate_data_size(*)) by endtime\n| project-rename endtime= Column1\n| extend table = \"DeviceNetworkEvents\"",
                    "db": "[parameters('ADXDataBaseName')]"
                  },
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['azuredataexplorer']['connectionId']"
                    }
                  },
                  "method": "post",
                  "path": "/ListKustoResults/false"
                }
              },
              "Summary_-_Estimate_DeviceProcessEvents_Size": {
                "runAfter": {
                  "Delay_4": [
                    "Succeeded"
                ]
                },
                "type": "ApiConnection",
                "inputs": {
                  "body": {
                    "cluster": "[parameters('ADXClusterURI')]",
                    "csl": "let starttime = bin(ago(1h), 1h);\nlet endtime = bin(now(), 1h);\nexternal_table('DeviceProcessEvents')\n| where ['time'] >= starttime and ['time'] < endtime\n| summarize total = sum(estimate_data_size(*)) by endtime\n| project-rename endtime= Column1\n| extend table = \"DeviceProcessEvents\"",
                    "db": "[parameters('ADXDataBaseName')]"
                  },
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['azuredataexplorer']['connectionId']"
                    }
                  },
                  "method": "post",
                  "path": "/ListKustoResults/false"
                }
              },
              "Summary_-_Inbound_Firewall_Traffic": {
                "runAfter": {
                  "Delay_5": [
                    "Succeeded"
                ]
                },
                "type": "ApiConnection",
                "inputs": {
                  "body": {
                    "cluster": "[parameters('ADXClusterURI')]",
                    "csl": "let starttime = bin(ago(1h), 1h);\nlet endtime = bin(now(), 1h);\nlet checkpoint =  external_table('checkpoint'), (print null=0)\n| where rt >= starttime and rt < endtime\n| summarize ConnectionsCount=count(),\n    RemoteIPCount = count_distinct(src),\n    RemotePortsCount=count_distinct(spt),\n    LocalPortsCount=count_distinct(dpt),\n    OutBytes = 0,\n    InBytes = 0    by dst, SimplifiedDeviceAction=act\n| extend direction=\"Out\", endtime=endtime\n| project-rename IP=dst;\nexternal_table('paloaltotraffic'), (print null=0)\n| where rt >= starttime and rt < endtime\n| summarize ConnectionsCount=count(), \n    RemoteIPCount = count_distinct(src),\n    RemotePortsCount=count_distinct(SourcePort),\n    LocalPortsCount=count_distinct(DestinationPort),\n    OutBytes = sum(total_in),\n    InBytes = sum(total_out) by dst, SimplifiedDeviceAction\n| extend direction=\"In\", endtime=endtime\n| project-rename IP=dst\n| union isfuzzy=true checkpoint",
                    "db": "[parameters('ADXDataBaseName')]"
                  },
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['azuredataexplorer']['connectionId']"
                    }
                  },
                  "method": "post",
                  "path": "/ListKustoResults/false"
                }
              },
              "Summary_-_Original_Palo_Table_Size_Estimate": {
                "runAfter": {
                  "Delay_6": [
                    "Succeeded"
                ]  
                },
                "type": "ApiConnection",
                "inputs": {
                  "body": {
                    "cluster": "[parameters('ADXClusterURI')]",
                    "csl": "let starttime = bin(ago(1h), 1h);\nlet endtime = bin(now(), 1h);\nunion isfuzzy=true external_table('paloaltotraffic'), external_table('checkpoint')| where rt >= starttime and rt < endtime\n| take 1000000000000000000\n| summarize total = sum(estimate_data_size(*)) by endtime\n| project-rename endtime= Column1\n| extend table = \"Firewall Traffic\"",
                    "db": "[parameters('ADXDataBaseName')]"
                  },
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['azuredataexplorer']['connectionId']"
                    }
                  },
                  "method": "post",
                  "path": "/ListKustoResults/false"
                }
              },
              "Summary_-_Outbound_Firewall_Traffic": {
                "runAfter": {
                },
                "type": "ApiConnection",
                "inputs": {
                  "body": {
                    "cluster": "[parameters('ADXClusterURI')]",
                    "csl": "let starttime = bin(ago(1h), 1h);\nlet endtime = bin(now(), 1h);\nlet checkpoint =  external_table('checkpoint'), (print null=0)\n| where rt >= starttime and rt < endtime\n| summarize ConnectionsCount=count(),\n    RemoteIPCount = count_distinct(dst),\n    RemotePortsCount=count_distinct(dpt),\n    LocalPortsCount=count_distinct(spt),\n    OutBytes = 0,\n    InBytes = 0    by src, SimplifiedDeviceAction=act\n| extend direction=\"Out\", endtime=endtime\n| project-rename IP=src;\nexternal_table('paloaltotraffic'), (print null=0)\n| where rt >= starttime and rt < endtime\n| summarize ConnectionsCount=count(),\n    RemoteIPCount = count_distinct(dst),\n    RemotePortsCount=count_distinct(DestinationPort),\n    LocalPortsCount=count_distinct(SourcePort),\n    OutBytes = sum(total_out),\n    InBytes = sum(total_in) by src, SimplifiedDeviceAction\n| extend direction=\"Out\", endtime=endtime\n| project-rename IP=src\n| union isfuzzy=true checkpoint",
                    "db": "[parameters('ADXDatabaseName')]"
                  },
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['azuredataexplorer']['connectionId']"
                    }
                  },
                  "method": "post",
                  "path": "/ListKustoResults/false"
                }
              }
            },
            "outputs": {}
          },
          "parameters": {
            "$connections": {
              "value": {
                "azuresentinel": {
                    "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                    "connectionName": "[variables('AzureSentinelConnectionName')]",
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureloganalyticsdatacollector')]"
                },
                "azuredataexplorer": {
                  "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',resourceGroup().location,'/managedApis/kusto')]",
                    "connectionId": "[resourceId('Microsoft.Web/connections', variables('ADXConnectionName'))]",
                  "connectionName": "[variables('ADXConnectionName')]",
                  "connectionProperties": {
                    "authentication": {
                      "type": "ManagedServiceIdentity"
                    }
                  }
                }
              }
            }
          }
        },
        "identity": {
          "type": "SystemAssigned"
        }
      }
    ],
    "outputs": {}
  }